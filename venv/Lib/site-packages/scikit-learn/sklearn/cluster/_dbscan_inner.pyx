# Fast inner loop for DBSCAN.
# Author: Lars Buitinck
# License: 3-clause BSD
#
# cython: boundscheck=False, wraparound=False

cimport cython
from libcpp.vector cimport vector
cimport numpy as np
import numpy as np


# Work around Cython bug: C++ exceptions are not caught unless thrown within
# a cdef function with an "except +" declaration.
cdef inline void push(vector[np.npy_intp] &stack, np.npy_intp i) except +:
    stack.push_back(i)

detectedCount = 0
def hasPerson(person, dc):
    global detectedCount
    detectedCount += 1
    return person >= dc

def deep_dbscan_inner(np.ndarray[np.uint8_t, ndim=1, mode='c'] is_core,
                 np.ndarray[object, ndim=1] neighborhoods,
                 np.ndarray[np.npy_intp, ndim=1, mode='c'] labels,
                 np.ndarray[np.npy_intp, ndim=1, mode='c'] ori_X,
                 dc=0, min_samples=1):
    cdef np.npy_intp i, label_num = 0, v
    cdef np.ndarray[np.npy_intp, ndim=1] neighb
    cdef vector[np.npy_intp] stack

    print('dc : {}, min_samples : {}'.format(dc, min_samples))

    for i in range(labels.shape[0]):
        if labels[i] != -1 or not is_core[i]:
            continue

        if not hasPerson(ori_X[i], dc):
            labels[i] = -2
            is_core[i] = 0
            continue

        # Depth-first search starting from i, ending at the non-core points.
        # This is very similar to the classic algorithm for computing connected
        # components, the difference being that we label non-core points as
        # part of a cluster (component), but don't expand their neighborhoods.
        isUpdatedLables = False
        while True:
            print('label_num : {}'.format(label_num))
            if labels[i] == -1:
                print('labels[i] == -1')
                if hasPerson(ori_X[i], dc):
                    print('hasPerson(ori_X[i], dc)')
                    if is_core[i]:
                        print('is_core[i]')
                        neighb = neighborhoods[i]
                        detected = []
                        for i in range(neighb.shape[0]):
                            v = neighb[i]
                            if hasPerson(ori_X[v], dc):
                                detected.append(v)
                                print('push detected : {}'.format(v))
                            else:
                                labels[v] = -2
                                is_core[v] = 0

                        print('len(detected) : {}'.format(len(detected)))
                        # min_samples 조건을 만족하면 클러스터 확장
                        if len(detected) >= min_samples:
                            for j in range(len(detected)):
                                index = detected[j]
                                if labels[index] == -1:
                                    labels[index] = label_num
                                    print('push stack : {}'.format(index))
                                    push(stack, index)
                                    isUpdatedLables = True
                        # min_samples 조건을 만족하지 못하면 모든 원소들 노이즈로 지정
                        # else:
                        #     for j in range(len(detected)):
                        #         index = detected[j]
                        #         labels[index] = -2
                else:
                    is_core[i] = 0
                    labels[i] = -2

            if stack.size() == 0:
                break
            i = stack.back()
            stack.pop_back()

        if isUpdatedLables:
            label_num += 1

    print('dbscan_inner detectedCount : {}'.format(detectedCount))

def dbscan_inner(np.ndarray[np.uint8_t, ndim=1, mode='c'] is_core,
                 np.ndarray[object, ndim=1] neighborhoods,
                 np.ndarray[np.npy_intp, ndim=1, mode='c'] labels):
    cdef np.npy_intp i, label_num = 0, v
    cdef np.ndarray[np.npy_intp, ndim=1] neighb
    cdef vector[np.npy_intp] stack

    for i in range(labels.shape[0]):
        if labels[i] != -1 or not is_core[i]:
            continue

        # Depth-first search starting from i, ending at the non-core points.
        # This is very similar to the classic algorithm for computing connected
        # components, the difference being that we label non-core points as
        # part of a cluster (component), but don't expand their neighborhoods.
        while True:
            if labels[i] == -1:
                labels[i] = label_num
                if is_core[i]:
                    neighb = neighborhoods[i]
                    for i in range(neighb.shape[0]):
                        v = neighb[i]
                        if labels[v] == -1:
                            push(stack, v)

            if stack.size() == 0:
                break
            i = stack.back()
            stack.pop_back()

        label_num += 1
